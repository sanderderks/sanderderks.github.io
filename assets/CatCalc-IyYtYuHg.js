import{a as f,c as Y}from"./Bubble.vue_vue_type_script_setup_true_lang-Bg7w0uV0.js";import{_ as d}from"./SelectField.vue_vue_type_script_setup_true_lang-x9JQmJFJ.js";import{R as t,_ as z}from"./TextField.vue_vue_type_script_setup_true_lang-Dgx0yMnh.js";import{d as U,z as j,a as n,o as y,v as F,x as R,j as i,i as K,u as s,l as H}from"../bundle.js";const Z={class:"flex flex-col items-center content-center"},E=U({__name:"CatCalc",setup(D){const a=j({calculator:{value:"average",error:""},catWeigth:{value:"",error:""},catAge:{value:"",error:""},catGender:{value:"male",error:""},catSize:{value:"",error:""},catFoodDry:{value:"",error:""},catFoodWet:{value:"",error:""},catFoodSnax:{value:"",error:""},catFoodSnaxPercentage:{value:"5",error:""}}),p=[{value:"average",label:"Average"},{value:"nvwa",label:"NVWA"},{value:"royalcanin",label:"Royal Canin"},{value:"petsplace",label:"Pets Place"},{value:"rawz",label:"RAWZ"},{value:"petcube",label:"Petcube"}],x=[{value:"default",label:"Adult healthy",rerIndex:1.4},{value:"lazy",label:"Adult lazy",rerIndex:1},{value:"castrated",label:"Adult castrated",rerIndex:1.2},{value:"underweight",label:"Adult underfed",rerIndex:1.8},{value:"overweight",label:"Adult overfed",rerIndex:.8},{value:"kitten0.4",label:"Kitten 0-4 months",rerIndex:2.5},{value:"kitten1",label:"Kitten 4-12 months",rerIndex:2}],P=[{value:"male",label:"Male"},{value:"female",label:"Female"}],S=n(()=>[{value:"35",label:"Small (<25cm)",factor:a.catGender.value==="male"?.9:.75},{value:"40",label:"Average (25-30cm)",factor:a.catGender.value==="male"?1:.9},{value:"45",label:"Big (30-35cm)",factor:a.catGender.value==="male"?1.125:1},{value:"65",label:"Pretty damn big (35-40cm)",factor:a.catGender.value==="male"?1.6:1.4},{value:"90",label:"Massive (>40cm)",factor:a.catGender.value==="male"?2.25:2}]),v={nvwa:[{weight:0,calories:0},{weight:1,calories:200},{weight:2,calories:200},{weight:3,calories:240},{weight:4,calories:280},{weight:5,calories:320},{weight:6,calories:360},{weight:7,calories:400},{weight:8,calories:440},{weight:9,calories:480},{weight:10,calories:520}],royalcanin:[{weight:0,calories:0},{weight:1,calories:225},{weight:2,calories:225},{weight:3,calories:275},{weight:4,calories:325},{weight:5,calories:375},{weight:6,calories:425},{weight:7,calories:475},{weight:8,calories:525},{weight:9,calories:575},{weight:10,calories:625}],petsplace:[{weight:0,calories:0},{weight:.5,calories:39},{weight:.9,calories:65},{weight:1.4,calories:88},{weight:1.8,calories:110},{weight:2.3,calories:130},{weight:2.7,calories:149},{weight:3.2,calories:167},{weight:3.6,calories:184},{weight:4.1,calories:200},{weight:4.5,calories:218},{weight:5,calories:234},{weight:5.5,calories:250},{weight:5.9,calories:265},{weight:6.4,calories:280},{weight:6.8,calories:295},{weight:7.3,calories:310},{weight:7.7,calories:324},{weight:8.2,calories:339},{weight:8.6,calories:353},{weight:9.1,calories:366},{weight:11.4,calories:433}],rawz:[{weight:0,calories:0},{weight:1,calories:183},{weight:2.268,calories:183},{weight:3.402,calories:245},{weight:4.536,calories:303},{weight:5.67,calories:362},{weight:6.804,calories:413},{weight:7.938,calories:462},{weight:9.072,calories:513}],petcube:[{weight:.45,calories:40},{weight:.9,calories:65},{weight:2.3,calories:140},{weight:3.15,calories:166},{weight:4.5,calories:250},{weight:6.8,calories:325},{weight:9.1,calories:400},{weight:11.25,calories:450}],average:[]},G=(l,r)=>{const e=v[l].sort((u,$)=>u.weight-$.weight);let o=e[e.length-2].weight,g=e[e.length-2].calories,C=e[e.length-1].weight,q=e[e.length-1].calories;for(let u=0;u<e.length-1;u++)if(r>=e[u].weight&&r<=e[u+1].weight){o=e[u].weight,g=e[u].calories,C=e[u+1].weight,q=e[u+1].calories;break}return{x1:o,y1:g,x2:C,y2:q}},N=(l,r)=>{const{x1:c,y1:e,x2:o,y2:g}=G(l,r);return e+(r-c)*(g-e)/(o-c)},B=()=>{const l=new Map;for(const e of Object.values(v).filter(o=>o!==v.average))for(const{weight:o,calories:g}of e)l.has(o)||l.set(o,{sum:0,count:0}),l.get(o).sum+=g,l.get(o).count++;return[0,1,2,3,4,5,6,7,8,9,10].filter(e=>l.has(e)).map(e=>({weight:e,calories:l.get(e).sum/l.get(e).count}))};v.average=B();const h=[{value:"default",label:"Average (340kcal)",calories:340},{value:"yarrah",label:"Yarrah Chicken (362kcal)",calories:361.5},{value:"yarrah_sterilized",label:"Yarrah Chicken sterilized (353kcal)",calories:353}],A=[{value:"",label:"None",calories:0},{value:"default",label:"Average (85kcal)",calories:85}],V=[{value:"",label:"None",calories:0},{value:"default",label:"Average (2kcal)",calories:2},{value:"yarrah",label:"Yarrah Mini Snack (2kcal)",calories:2},{value:"catstick",label:"Vitakraft Cat Stick (12kcal)",calories:12},{value:"milk_average",label:"Milk Average (40kcal/50ml)",calories:40},{value:"dried_fish",label:"Dried Fish (8kcal)",calories:8}],I=n(()=>N(a.calculator.value,Number(a.catWeigth.value))),M=n(()=>{var l;return I.value*(((l=x.find(r=>r.value===a.catAge.value))==null?void 0:l.rerIndex)??1)}),b=n(()=>{var l;return M.value*(((l=S.value.find(r=>r.value===a.catSize.value))==null?void 0:l.factor)??1)}),m=n(()=>{const l=V.find(r=>r.value===a.catFoodSnax.value);return l!=null&&l.calories?b.value*(Number(a.catFoodSnaxPercentage.value)/100)/l.calories:void 0}),k=n(()=>b.value*(1-Number(m.value?a.catFoodSnaxPercentage.value:0)/100)),w=n(()=>{const l=A.find(r=>r.value===a.catFoodWet.value);return l!=null&&l.calories?k.value/4/l.calories*100:void 0}),O=n(()=>k.value/4*(w.value?3:4)),W=n(()=>{var l;return O.value/(((l=h.find(r=>r.value===a.catFoodDry.value))==null?void 0:l.calories)??h[0].calories)*100});return(l,r)=>(y(),F(Y,null,{content:R(()=>[i(f,{class:"!bg-cyan-800 !bg-opacity-50 my-5 !rounded-secondary",title:"Cat Calculator",description:"Do a Cat Calculation!"},{default:R(()=>{var c;return[K("div",Z,[i(d,{class:"w-3/4 md:w-1/2",name:"calculator",label:"Calculation based on",modelValue:a.calculator.value,"onUpdate:modelValue":r[0]||(r[0]=e=>a.calculator.value=e),error:a.calculator.error,"onUpdate:error":r[1]||(r[1]=e=>a.calculator.error=e),options:p,rules:[s(t).Required]},null,8,["modelValue","error","rules"]),i(z,{class:"w-3/4 md:w-1/2",name:"catWeigth",label:"Cat Weight (kg)",modelValue:a.catWeigth.value,"onUpdate:modelValue":r[2]||(r[2]=e=>a.catWeigth.value=e),error:a.catWeigth.error,"onUpdate:error":r[3]||(r[3]=e=>a.catWeigth.error=e),rules:[s(t).Required,s(t).Numeric],"min-value":1,"max-value":10,"input-props":{type:"number"}},null,8,["modelValue","error","rules"]),i(d,{class:"w-3/4 md:w-1/2",name:"catAge",label:"Cat Age",modelValue:a.catAge.value,"onUpdate:modelValue":r[4]||(r[4]=e=>a.catAge.value=e),error:a.catAge.error,"onUpdate:error":r[5]||(r[5]=e=>a.catAge.error=e),options:x,rules:[s(t).Required]},null,8,["modelValue","error","rules"]),i(d,{class:"w-3/4 md:w-1/2",name:"catGender",label:"Cat Gender",modelValue:a.catGender.value,"onUpdate:modelValue":r[6]||(r[6]=e=>a.catGender.value=e),error:a.catGender.error,"onUpdate:error":r[7]||(r[7]=e=>a.catGender.error=e),options:P,rules:[s(t).Required]},null,8,["modelValue","error","rules"]),i(d,{class:"w-3/4 md:w-1/2",name:"catSize",label:"Cat Shoulder Height",modelValue:a.catSize.value,"onUpdate:modelValue":r[8]||(r[8]=e=>a.catSize.value=e),error:a.catSize.error,"onUpdate:error":r[9]||(r[9]=e=>a.catSize.error=e),options:S.value,rules:[s(t).Required]},null,8,["modelValue","error","options","rules"]),i(f,{class:"w-full md:w-2/3 my-5 border border-neutral-400 !rounded-primary",description:"Required energy per day: "+b.value.toFixed(1)+" kcal"},null,8,["description"]),i(d,{class:"w-3/4 md:w-1/2",name:"catFoodDry",label:"Dry Food",modelValue:a.catFoodDry.value,"onUpdate:modelValue":r[10]||(r[10]=e=>a.catFoodDry.value=e),error:a.catFoodDry.error,"onUpdate:error":r[11]||(r[11]=e=>a.catFoodDry.error=e),options:h,rules:[s(t).Required]},null,8,["modelValue","error","rules"]),i(d,{class:"w-3/4 md:w-1/2",name:"catFoodWet",label:"Wet Food (25%)",modelValue:a.catFoodWet.value,"onUpdate:modelValue":r[12]||(r[12]=e=>a.catFoodWet.value=e),error:a.catFoodWet.error,"onUpdate:error":r[13]||(r[13]=e=>a.catFoodWet.error=e),options:A,rules:[s(t).Required]},null,8,["modelValue","error","rules"]),i(d,{class:"w-3/4 md:w-1/2",name:"catFoodSnax",label:"Snacks",modelValue:a.catFoodSnax.value,"onUpdate:modelValue":r[14]||(r[14]=e=>a.catFoodSnax.value=e),error:a.catFoodSnax.error,"onUpdate:error":r[15]||(r[15]=e=>a.catFoodSnax.error=e),options:V,rules:[s(t).Required]},null,8,["modelValue","error","rules"]),a.catFoodSnax.value?(y(),F(z,{key:0,class:"w-3/4 md:w-1/2",name:"catFoodSnaxPercentage",label:"Snacks Percentage",modelValue:a.catFoodSnaxPercentage.value,"onUpdate:modelValue":r[16]||(r[16]=e=>a.catFoodSnaxPercentage.value=e),error:a.catFoodSnaxPercentage.error,"onUpdate:error":r[17]||(r[17]=e=>a.catFoodSnaxPercentage.error=e),rules:[s(t).Required,s(t).Numeric],"min-value":1,"max-value":10,"input-props":{type:"number"}},null,8,["modelValue","error","rules"])):H("",!0),i(f,{class:"w-full md:w-2/3 my-5 border border-neutral-400 bg-primary-600 bg-opacity-25 !rounded-primary",title:"Result","sub-title":"Based on constants from "+((c=p.find(e=>e.value===a.calculator.value))==null?void 0:c.label),description:["Required dry food per day: "+W.value.toFixed(1)+" g","","","Required dry food per meal: "+(W.value/(w.value?2:3)).toFixed(1)+" g",...w.value?["Required wet food per day: "+w.value.toFixed(1)+" g"]:[],...m.value?["Allowed snacks per day: "+m.value.toFixed(m.value<1?1:0)+" snacks"]:[],"","","","^ Mogu approved!"]},null,8,["sub-title","description"])])]}),_:1})]),_:1}))}}),X=U({__name:"CatCalc",setup(D){return(a,p)=>(y(),F(E))}});export{X as default};
