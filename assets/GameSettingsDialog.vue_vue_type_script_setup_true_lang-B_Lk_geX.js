import{_ as y,a as S}from"./SwitchField.vue_vue_type_script_setup_true_lang-PInLX98O.js";import{_ as H}from"./SelectField.vue_vue_type_script_setup_true_lang-DmhzIFzD.js";import{cG as _,c1 as E,cH as h,cI as r,cJ as A,cw as c,cv as n,cK as D,b$ as u,cL as V,cM as R,cN as d,M as O,bo as b,bQ as g,cO as N,aK as P,s as w,bH as I,I as f,bi as p,ak as v}from"../bundle.js";var C=(e=>(e[e.HAS_NOT_STARTED=0]="HAS_NOT_STARTED",e[e.HAS_STARTED=1]="HAS_STARTED",e[e.HAS_THROWN_DICES=2]="HAS_THROWN_DICES",e[e.HAS_CHOSEN_DICES=3]="HAS_CHOSEN_DICES",e[e.HAS_CHOSEN_TILE=4]="HAS_CHOSEN_TILE",e[e.HAS_LOST=5]="HAS_LOST",e[e.HAS_FINISHED=6]="HAS_FINISHED",e))(C||{}),L=(e=>(e[e.NONE=0]="NONE",e[e.HAS_LOST_TILE=1]="HAS_LOST_TILE",e[e.HAS_LOST_NOTHING=2]="HAS_LOST_NOTHING",e))(L||{}),B=(e=>(e[e.NONE=0]="NONE",e[e.WINNER_HIGHEST_SCORE=1]="WINNER_HIGHEST_SCORE",e[e.WINNER_HIGHEST_TILE=2]="WINNER_HIGHEST_TILE",e[e.LOSER=3]="LOSER",e))(B||{}),k=(e=>(e[e.PLAYER=0]="PLAYER",e[e.ROBOT=1]="ROBOT",e))(k||{});const m=e=>({gameStatus:0,gameStatusActivator:0,finishStatus:0,loseStatus:0,activePlayer:0,dices:[...M.map(s=>({...s}))],tiles:[...$],score:{0:[],1:[]},gameData:(e==null?void 0:e.gameData)??{highscores:{}},previousPersonalBest:(e==null?void 0:e.previousPersonalBest)??null,previousHighscorePosition:(e==null?void 0:e.previousHighscorePosition)??null,robotSpeed:1}),W=e=>{for(let s=1;s<=6;s++)if(e.every(i=>i.value===s))return!0;return!1},T=_(),x=E("rainwormsStore",{state:()=>m(),getters:{isRolling:e=>e.dices.some(s=>s.isRolling),hasWorm:e=>e.dices.filter(s=>s.selected).some(s=>s.value===6),hasAlreadyChosen:e=>s=>e.dices.some(i=>i.value===s&&i.selected),canSelectAnyTile:e=>s=>e.tiles.some(i=>i.displayValue<=s),canPlay:e=>s=>e.activePlayer===(s??0),visibleTile:e=>s=>{const i=e.score[s??0];return i.length?i[i.length-1]:null},selectedDiceTotal:e=>{let s=0;return e.dices.filter(i=>i.selected).forEach(i=>{s+=i.value===6?5:i.value}),s},totalScore:e=>s=>{let i=0;return e.score[s].forEach(t=>{i+=t.value}),i},personalBest:e=>s=>{var i;return((i=e.gameData.highscores[s])==null?void 0:i.score)??0},highscorePosition:e=>s=>Object.keys(e.gameData.highscores).indexOf(s)+1},actions:{reset(e){this.$patch(m(this)),this.setPreviousHighscores(e)},start(){this.gameStatus=1},async roll(e){this.canPlay(e)&&((this.gameStatus===1||this.gameStatus===4||this.gameStatus===5)&&this.dices.forEach(s=>{s.selected=!1}),this.gameStatus=2,this.dices.forEach(s=>{s.selected||(s.isRolling=!0,setTimeout(()=>{s.value=h(6),s.isRolling=!1,this.dices.sort((i,t)=>i.value-t.value),!this.isRolling&&this.gameStatus!==5&&this.hasLostRound()&&this.loseTurn(e)},h(1500,500)))}),r(R))},async hasFinishedRolling(){for(;this.isRolling;)await new Promise(e=>setTimeout(e,500));return!0},hasLostRound(){const e=this.dices.filter(s=>!s.selected&&!this.hasAlreadyChosen(s.value));return!e.length||W(e)&&this.dices.every(s=>s.value!==6)},loseTurn(e){this.gameStatus=5,this.gameStatusActivator=e??0,this.score[this.gameStatusActivator].length?this.loseStatus=1:this.loseStatus=2,this.popLastTile(),this.tiles.length===0?this.gameStatus=6:this.passTurn()},popLastTile(){const e=this.score[this.activePlayer];if(e.length){const s=e.splice(e.length-1,1)[0];this.tiles.push(s),this.tiles.sort((i,t)=>i.displayValue-t.displayValue)}this.tiles.splice(this.tiles.length-1,1)},selectDice(e,s){this.canPlay(s)&&!this.isRolling&&this.gameStatus===2&&!e.selected&&!this.hasAlreadyChosen(e.value)&&(this.gameStatus=3,this.dices.filter(i=>i.value===e.value).forEach(i=>{i.selected=!0}),r(d))},selectTile(e,s,i){if(this.canPlay(i)&&(this.gameStatus===2||this.gameStatus===3)){if(this.gameStatus=4,this.gameStatusActivator=i??0,s){const t=this.score[this.activePlayer===0?1:0];t.splice(t.length-1,1)}else this.tiles=this.tiles.filter(t=>t.displayValue!==e.displayValue);this.score[this.activePlayer].push(e),r(d),this.tiles.length===0?this.gameStatus=6:this.passTurn()}},passTurn(e){(this.activePlayer===1||this.gameStatus!==5||e)&&(this.activePlayer===0?setTimeout(()=>{this.activePlayer=1,setTimeout(()=>{this.gameStatus=1,this.gameStatusActivator=0},1e3)},e?0:this.robotSpeed*1e3*2):setTimeout(()=>{this.activePlayer=0},e?0:this.robotSpeed*1e3*2))},async playRobot(){switch(this.gameStatus){case 1:{this.roll(1);break}case 2:{await this.hasFinishedRolling(),setTimeout(()=>{const e=this.dices.filter(i=>!i.selected),s=this.visibleTile(0);if(s&&this.selectedDiceTotal<s.displayValue)for(let i=6;i>=1;i--){const t=e.filter(l=>l.value===i&&!this.hasAlreadyChosen(i));if(t.length){const l=t.length*(i===6?5:i);if(this.selectedDiceTotal+l===s.displayValue){this.selectDice(t[0],1);return}}}for(let i=6;i>=1;i--){const t=e.find(l=>l.value===i);if(t&&!this.hasAlreadyChosen(i)){this.selectDice(t,1);return}}},this.robotSpeed*1e3);break}case 3:{setTimeout(()=>{const e=this.visibleTile(0);if(this.tiles.every(s=>s.displayValue>this.selectedDiceTotal)&&e&&e.displayValue>this.selectedDiceTotal)console.log("my score is too low"),this.roll(1);else if(e&&e.displayValue===this.selectedDiceTotal)console.log("i can steal"),this.selectTile(e,!0,1);else if(this.selectedDiceTotal>=30){console.log("i am rich");for(let s=this.selectedDiceTotal;s>=21;s--){const i=this.tiles.find(t=>t.displayValue===s);if(i){this.selectTile(i,!1,1);return}}this.roll(1)}else if(new Set(this.dices.filter(s=>s.selected).map(s=>s.value)).size<=3)if(this.dices.filter(s=>!s.selected).length<=2){console.log("there aren't that much dices left");const s=this.tiles.filter(i=>i.displayValue>=this.selectedDiceTotal-5&&i.displayValue<=this.selectedDiceTotal).sort((i,t)=>t.displayValue-i.displayValue);s.length?(console.log("i choose the highest score within 5 tiles"),this.selectTile(s[0],!1,1)):(console.log("i choose to roll again"),this.roll(1))}else console.log("i have nothing to worry about"),this.roll(1);else if(!this.hasWorm)console.log("i am worrying and have no worm yet"),this.roll(1);else{console.log("if i can choose, i choose");const s=this.tiles.filter(i=>i.displayValue<=this.selectedDiceTotal).sort((i,t)=>t.displayValue-i.displayValue);s.length?(console.log("i choose the highest score"),this.selectTile(s[0],!1,1)):(console.log("i choose to roll again"),this.roll(1))}},this.robotSpeed*1e3);break}default:console.log("DEFAULT",this.gameStatus)}},checkFinishStatus(e){const s=this.totalScore(0),i=this.totalScore(1);s>i?this.finishStatus=1:s===i&&Math.max(...this.score[0].map(t=>t.displayValue))>Math.max(...this.score[1].map(t=>t.displayValue))?this.finishStatus=2:this.finishStatus=3,(this.finishStatus===1||this.finishStatus===2)&&(e&&this.updateHighscores(e),new Audio("/sounds/applause-and-cheer.mp3").play())},setPreviousHighscores(e,s=!1){e&&((!s||this.previousPersonalBest===null)&&(this.previousPersonalBest=this.personalBest(e)),(!s||this.previousHighscorePosition===null)&&(this.previousHighscorePosition=this.highscorePosition(e)))},async fetchHighscores(e){try{const s=await A(c(T,n.gameData.id,"rainworms"));s&&(this.gameData=await D.mapIncoming(s),this.sortHighscores(),this.setPreviousHighscores(e,!0))}catch(s){u.firebaseError(!0,s)}},async updateHighscores(e){try{if(this.gameData&&this.totalScore(0)){const s=this.gameData.highscores,i=this.totalScore(0);if(!s[e]||s[e].score<i)return await this.fetchHighscores(e),this.setPreviousHighscores(e),this.gameData.highscores[e]={score:i,bonus:0,date:new Date},await V(c(T,n.gameData.path,"rainworms"),{highscores:this.gameData.highscores}),this.sortHighscores(),!0}return!1}catch(s){return u.firebaseError(!0,s),!1}},sortHighscores(){this.gameData.highscores=Object.fromEntries(Object.entries(this.gameData.highscores).sort(([,e],[,s])=>s.score-e.score))}},persist:{enabled:!0}}),M=[{id:1,value:6,selected:!1,isRolling:!1},{id:2,value:6,selected:!1,isRolling:!1},{id:3,value:6,selected:!1,isRolling:!1},{id:4,value:6,selected:!1,isRolling:!1},{id:5,value:6,selected:!1,isRolling:!1},{id:6,value:6,selected:!1,isRolling:!1},{id:7,value:6,selected:!1,isRolling:!1},{id:8,value:6,selected:!1,isRolling:!1}],$=[{displayValue:21,value:1},{displayValue:22,value:1},{displayValue:23,value:1},{displayValue:24,value:1},{displayValue:25,value:2},{displayValue:26,value:2},{displayValue:27,value:2},{displayValue:28,value:2},{displayValue:29,value:3},{displayValue:30,value:3},{displayValue:31,value:3},{displayValue:32,value:3},{displayValue:33,value:4},{displayValue:34,value:4},{displayValue:35,value:4},{displayValue:36,value:4}],Y=O({__name:"GameSettingsDialog",props:{isOpen:{type:Boolean,required:!0},isOpenModifiers:{}},emits:["update:isOpen"],setup(e){const s=b(e,"isOpen"),{useAudio:i}=g(N()),{robotSpeed:t}=g(x());return(l,a)=>(P(),w(S,{isOpen:s.value,title:"Game Settings",description:"Huidige versie: v1 (16-11-2024)",cancelText:"Close",onCancel:a[2]||(a[2]=o=>s.value=!1)},{default:I(()=>[f(y,{name:"useAudio",label:"Audio",modelValue:p(i),"onUpdate:modelValue":a[0]||(a[0]=o=>v(i)?i.value=o:null)},null,8,["modelValue"]),f(H,{name:"robotSpeed",label:"Rainworms robot speed",modelValue:p(t),"onUpdate:modelValue":a[1]||(a[1]=o=>v(t)?t.value=o:null),options:[{value:.25,label:"0.25 seconds"},{value:.5,label:"0.5 seconds"},{value:.75,label:"0.75 seconds"},{value:1,label:"1 second"},{value:3,label:"3 seconds"},{value:5,label:"5 seconds"}]},null,8,["modelValue"])]),_:1},8,["isOpen"]))}});export{B as F,C as G,L,k as P,Y as _,x as u};
